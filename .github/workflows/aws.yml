# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Junction CI-CD with Gradle

on:
  push:
    tags:
      - pink-hacker-*

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - ## github private repository에 checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: recursive
      - ## JDK 17 설치
        name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - ## Gradle Build
        name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
      - ## Github commit에서 version 정보 파싱 후 docker_meta로 저장
        name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_HUB_ID }}/junction
          tags: |
            type=match,pattern=pink-hacker-(.*),group=1
      - ## DockerHub 로그인
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_ID }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - ## Dockerfile을 통해 image 생성 및 DockerHub로 Push
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
      - ## ec2에서 docker image pull받은 후 실행
        name: Deploy (AWS ec2)
        uses: appleboy/ssh-action@master
        with:
          host: ec2-3-35-213-48.ap-northeast-2.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker pull ${{ steps.docker_meta.outputs.tags }}
            sudo docker pull ${{ secrets.DOCKER_HUB_ID }}/junction
            ~/deploy.sh
